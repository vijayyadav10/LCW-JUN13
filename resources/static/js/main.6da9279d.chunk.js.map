{"version":3,"sources":["helper/Constant.js","api/Api.js","helper/Helper.js","ui/SimpleTable.js","page/Config.js","helper/AccordionHelper.js","ui/ContentDetailModal.js","page/MultiContentList.js","en.js","it.js","App.js","custom-element/et-app.js"],"names":["PERPAGEOPTIONS","SELECT","id","NAME","CREATEDBY","LASTEDITED","CREATEDDATE","T_HEADING","BTN_ADD_NEW_CONTENT","KC_TOKEN_PREFIX","UNIVERSAL_DATE_FORMAT","STRAPI_IMAGE_EXTENSIONS","STRAPI_IMAGE_URL_KEY","STRAPI_EXCLUDE_KEYS","ACCORDION_FONT_SIZE","NO_DATA_AVAILABLE_MSG","domain","process","templateBaseUrl","rootAdminEndPoint","sortByCreateDateByDescOrder","localeUrl","STRAPI_TOKEN","getCollectionTypes","a","axios","get","addAuthorizationRequestConfig","data","getContents","collectionType","page","pageSize","url","getLocales","getAllRecordsByCollectionType","lastPageSize","getContentDetailsByCollectionTypeAndId","contentId","filterContentsByName","query","searchBy","Error","getTemplate","collectionTypeUrl","getDefaultOptions","defaultBearer","headers","config","defaultOptions","getKey","content","keys","Object","index","findIndex","item","toLowerCase","allowedKeys","filter","includes","length","searchByKey","parseData","JSON","parse","SimpleTable","props","componentDidMount","getContentByHighestId","componentDidUpdate","prevProps","prevState","contentIdAndTemplateId","getContentIds","decodeURI","contents","console","log","highestContentId","map","el","sort","b","reverse","selectedContentName","parsedSelectedContent","selectedContent","filteredCont","cont","results","find","window","aaa","bbb","mappingOfContentWithTemplate","templateId","setState","renderToggleButton","isMenuShown","onClick","type","style","position","height","top","right","border","e","preventDefault","className","onChangeTemplateId","templateSelectedForContent","target","value","templateChangedForContent","applyTemplateToContent","mappingOfContentTemplate","setContentTemplate","onApplyToAll","document","getElementsByName","forEach","state","applyTemplateToAllContent","toString","applyTemplateToAllContentTwo","selectTempForContent","templateType","selectedTemplateType","this","decideToShowQuery","contentAttribute","idx","createdBy","firstname","lastname","moment","Date","updatedAt","format","publishedAt","width","defaultValue","display","name","onChange","message","disabled","hidden","templateList","templateName","textAlign","to","margin","React","Component","Title","createdAt","createDate","selectDefaultTemplate","strapiDomain","REACT_APP_STRAPI_API_TARGET_URL","Config","setSelectedContent","selectedContentArr","selectedContenttype","handleTypeaheadChangeContentType","selected","selectedContentType","option","label","contentTypes","obj","uid","startsWith","isDisplayed","contentTypeRefine","element","push","info","pluralName","templatesList","collectionTypes","handleAddNewContent","strapiContentManagerUrl","newWindow","open","focus","selectedContentLabel","SaveQueryHandler","searchTerm","bind","xs","title","role","bsStyle","manipulateIsEditable","marginTop","setTemplateId","borderRight","lg","padding","color","intl","formatMessage","injectIntl","panelGroupId","renderPanelGroup","PanelGroup","accordion","marginBottom","isImageObject","renderPanel","key","ignoreProps","keyToShow","dataToShow","isAnArray","Number","checkIfComponent","dataObj","arr","split","indexOf","replace","Array","isArray","theKey","theIndex","Panel","eventKey","renderPanelHeading","isObject","renderPanelBody","Heading","renderPanelTitleToggle","renderPanelTitle","Grid","Row","fontSize","Col","marginLeft","wordBreak","isKey0To9","charAt","toUpperCase","slice","paddingRight","lineHeight","renderAccordionData","toggle","Body","collapsible","undefined","endsWithAnyImageExtension","src","alt","isDate","dateString","endsWith","string","suffix","object","ContentDetailModal","toggleTab","setActiveTabKey","dataToShowOnModal","localizations","getCollectionByLocaleName","currentCode","getLocaleInfo","localeInfo","code","contentDettailsResponse","dataToShowOnModalRestTabs","show","mockRows","selectedCollectionType","collectionAttributes","dummyData","dialogClassName","onHide","Header","fetchTitleOrName","tabIndex","activeKey","activeTabKey","onSelect","locale","getLocaleFullName","overflowY","overflowX","locTabs","i","Footer","MultiContentList","populateConfigForm","setCollectionTypeState","shouldShowEtSaveBtn","searchBtnClk","pageInput","currPageWillUpdating","getContentsByCollectionType","searchText","selectedCollectionTypeValue","searchQuery","colLabel","searchResult","stateUpdateOnFilterContentsByName","componentWillUnmount","stowSearchQueryTillSubmit","selectedContentList","btnVisibility","getElementsByClassName","visibility","filterUidByApiPrefix","collectionTypeData","contentDetailsOnModal","contentIdForModal","close","handleCollectionTypeChange","setFieldSearchBy","collType","contentData","lastPage","pagination","pageCount","totalItems","total","setSearchBy","setPage","isNaN","totalPages","newPaginationState","assign","pageChangeValue","onContentSearch","handleQueryChange","onPerPageSelect","onPageInput","onSubmit","onContentListSaveHandler","setQueryTerm","setSelectedContentName","checkIfSelected","editMode","isEditable","cancelHandler","tempSelectedCollectionType","collectionTypeApiData","displayName","singularName","contentItem","removedUnselectedContentId","perPage","perPageOptions","itemsStart","itemsEnd","Math","min","placeholder","emptyLabel","options","toggleMenu","align","onContentSelect","checked","itemCount","viewType","amountOfPages","pageInputValue","onPageSet","changePage","onFirstPage","onPreviousPage","onNextPage","onLastPage","messages","sm","borderBottom","isToEnableSaveQueryBtn","App","setLocale","getJsonString","stringify","encodeURI","contentName","contentLabel","saveQueryData","saveQuery","fieldSearchWith","currLocale","decideLocale","en","it","heckthebox","path","exact","WidgetElement","reactRootRef","createRef","mountPoint","oldValue","newValue","MainApp","ref","ReactDOM","render","current","createElement","appendChild","HTMLElement","customElements","define"],"mappings":"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","file":"static/js/main.6da9279d.chunk.js","sourcesContent":["import { locale } from \"moment\";\nimport {  FormattedMessage } from \"react-intl\";\n\n/*********************\n * PAGINATION ********\n *********************/\n\n\nexport const PERPAGEOPTIONS = [5, 10, 15, 25, 50];\nexport const PAGE = 1;\nexport const PAGESIZE = 5;\nexport const TOTALITEMS = 20;\nexport const LASTPAGE = 4;\nexport const PAGEINPUT = 1;\nexport const PAGECHANGEVALUE = 1;\n\n/*********************\n * UI CONSTANT *******\n *********************/\nexport const SEARCH_CONTENT_BY_NAME = \"Search Content By Name...\";\nexport const SELECT_COLLECTION_TYPE = \"Select Collection Type\"; \n\n/*********************\n * UI LABEL **********\n *********************/\nexport const SELECT = <FormattedMessage id='app.select' />\nexport const NAME = <FormattedMessage id='app.name' />\nexport const CREATEDBY = <FormattedMessage id='app.created' />\nexport const LASTEDITED = <FormattedMessage id='app.lastEdited' />\nexport const CREATEDDATE = <FormattedMessage id='app.createdDate' />\nexport const T_HEADING = {\n    SELECT: SELECT,\n    NAME: NAME,\n    CREATEDBY: CREATEDBY,\n    LASTEDITED: LASTEDITED,\n    CREATEDDATE: CREATEDDATE\n}\n\nexport const BTN_ADD_NEW_CONTENT = <FormattedMessage id='app.addNewContent' />;\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const KC_TOKEN_PREFIX = 'EntKcToken';\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const UNIVERSAL_DATE_FORMAT = \"YYYY-MM-DD HH:mm:ss\"\n\n/*********************\n * For Strapi Images ****\n *********************/\n export const IMAGE_EXT = [\n    \".ase\",\n    \".art\",\n    \".bmp\",\n    \".blp\",\n    \".cd5\",\n    \".cit\",\n    \".cpt\",\n    \".cr2\",\n    \".cut\",\n    \".dds\",\n    \".dib\",\n    \".djvu\",\n    \".egt\",\n    \".exif\",\n    \".gif\",\n    \".gpl\",\n    \".grf\",\n    \".icns\",\n    \".ico\",\n    \".iff\",\n    \".jng\",\n    \".jpeg\",\n    \".jpg\",\n    \".jfif\",\n    \".jp2\",\n    \".jps\",\n    \".lbm\",\n    \".max\",\n    \".miff\",\n    \".mng\",\n    \".msp\",\n    \".nef\",\n    \".nitf\",\n    \".ota\",\n    \".pbm\",\n    \".pc1\",\n    \".pc2\",\n    \".pc3\",\n    \".pcf\",\n    \".pcx\",\n    \".pdn\",\n    \".pgm\",\n    \".PI1\",\n    \".PI2\",\n    \".PI3\",\n    \".pict\",\n    \".pct\",\n    \".pnm\",\n    \".pns\",\n    \".ppm\",\n    \".psb\",\n    \".psd\",\n    \".pdd\",\n    \".psp\",\n    \".px\",\n    \".pxm\",\n    \".pxr\",\n    \".qfx\",\n    \".raw\",\n    \".rle\",\n    \".sct\",\n    \".sgi\",\n    \".rgb\",\n    \".int\",\n    \".bw\",\n    \".tga\",\n    \".tiff\",\n    \".tif\",\n    \".vtf\",\n    \".xbm\",\n    \".xcf\",\n    \".xpm\",\n    \".3dv\",\n    \".amf\",\n    \".ai\",\n    \".awg\",\n    \".cgm\",\n    \".cdr\",\n    \".cmx\",\n    \".dxf\",\n    \".e2d\",\n    \".egt\",\n    \".eps\",\n    \".fs\",\n    \".gbr\",\n    \".odg\",\n    \".svg\",\n    \".stl\",\n    \".vrml\",\n    \".x3d\",\n    \".sxd\",\n    \".v2d\",\n    \".vnd\",\n    \".wmf\",\n    \".emf\",\n    \".art\",\n    \".xar\",\n    \".png\",\n    \".webp\",\n    \".jxr\",\n    \".hdp\",\n    \".wdp\",\n    \".cur\",\n    \".ecw\",\n    \".iff\",\n    \".lbm\",\n    \".liff\",\n    \".nrrd\",\n    \".pam\",\n    \".pcx\",\n    \".pgf\",\n    \".sgi\",\n    \".rgb\",\n    \".rgba\",\n    \".bw\",\n    \".int\",\n    \".inta\",\n    \".sid\",\n    \".ras\",\n    \".sun\",\n    \".tga\",\n    \".heic\",\n    \".heif\"\n];\n\nexport const STRAPI_IMAGE_EXTENSIONS = ['.JPEG', '.JPG', '.PNG', '.GIF', '.SVG', '.TIFF', '.ICO', '.DVU'];\nexport const STRAPI_IMAGE_URL_KEY = 'url';\nexport const STRAPI_IMAGE_HEIGHT = '50px';\nexport const STRAPI_IMAGE_WIDTH = '50px';\nexport const STRAPI_EXCLUDE_KEYS =  [\"createdAt\", \"updatedAt\", \"publishedAt\", \"createdBy\", \"updatedBy\", \"id\", \"localizations\", \"locale\"];\nexport const ACCORDION_FONT_SIZE = \"13px\";\nexport const NO_DATA_AVAILABLE_MSG = <FormattedMessage id='app.noDataAvailable' />","import axios from 'axios';\nimport { KC_TOKEN_PREFIX, PAGE, PAGESIZE } from '../helper/Constant';\nconst domain = `${process.env.REACT_APP_STRAPI_API_URL}`;\nconst templateBaseUrl = `${process.env.REACT_APP_PUBLIC_API_URL}/template/`;\nconst rootAdminEndPoint = `${domain}/content-manager/collection-types/api::`;\nconst sortByCreateDateByDescOrder = `&sort=createdAt:DESC`;\nconst localeUrl = `${domain}/i18n/locales`\n\nconst STRAPI_TOKEN = {\n    'Authorization': `Bearer ${process.env.REACT_APP_LOCAL_STRAPI_TOKEN}`\n}\n\nexport const postLoginAdmin = async (data) => {\n    return axios.post(`${domain}/admin/login`, data);\n}\n\n// GET Collection Type\nexport const getCollectionTypes = async () => {\n    const { data } = await axios.get(`${domain}/content-manager/content-types`, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getContents = async (collectionType, page = PAGE, pageSize = PAGESIZE) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?page=${page}&pageSize=${pageSize}${sortByCreateDateByDescOrder}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getCollectionLocaleWise = async (collectionType, localecode) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?locale=${localecode}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\n// API to get locales\nexport const getLocales = async () => {\n    let url = `${localeUrl}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\nexport const fetchContents = async (collectionType) => {\n    // const url = `${domain}/api/${collectionType}`;\n    return await getContents(collectionType);\n}\n\nexport const getAllRecordsByCollectionType = async (collectionType, lastPageSize) => {\n    // http://localhost:1337/content-manager/collection-types/api::pagination.pagination?page=1&pageSize=36&sort=id:ASC\n    const url = `${rootAdminEndPoint}${collectionType}.${collectionType}?page=1&pageSize=${lastPageSize}&sort=id:ASC`\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\nexport const getContentDetailsByCollectionTypeAndId = async (collectionType, contentId) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}/${contentId}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const filterContentsByName = async (collectionType, query, searchBy, page = PAGE, pageSize = PAGESIZE) => {\n    if (!collectionType) {\n        throw new Error('collectionType is missing');\n    }\n    const url = `${rootAdminEndPoint}${collectionType}.${collectionType}?filters[${searchBy}][$containsi]=${query}&page=${page}&pageSize=${pageSize}`\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\n// API to list of templates Spring-Boot API\nexport const getTemplate = async (collectionType) => {\n    // const data = await axios.get(`${templateBaseUrl}`);\n    //TODO: Uncomment when using proper token system for template management.\n    const collectionTypeUrl = collectionType ? `?collectionType=${collectionType}` : \"\";\n    const data = await axios.get(`${templateBaseUrl+collectionTypeUrl}`,addAuthorizationRequestConfig({}));\n    return data;\n}\n\nconst getKeycloakToken = () => {\n    return '';\n    if (window && window.entando && window.entando.keycloak && window.entando.keycloak.authenticated) {\n        return window.entando.keycloak.token\n    } else {\n        return localStorage.getItem('token');\n    }\n}\n\nconst getDefaultOptions = (defaultBearer) => {\n    const token = getKeycloakToken()\n    if (!token) {\n        //Below if condition is to run the strapi API in local\n        if (defaultBearer === KC_TOKEN_PREFIX) {\n            return {\n                headers: STRAPI_TOKEN\n            }\n        } else {\n            return {}\n        }\n    }\n    // logic to add token for both strapi and MS api\n    return {\n        headers: {\n            Authorization: `${defaultBearer} ${token}`,\n        },\n    }\n}\n\n// Get authorization tokens\nexport const addAuthorizationRequestConfig = (config = {}, defaultBearer = 'Bearer') => {\n    let defaultOptions = getDefaultOptions(defaultBearer);\n    return {\n        ...config,\n        ...defaultOptions\n    }\n}","import { STRAPI_EXCLUDE_KEYS } from \"./Constant\";\n\n/**\n * Value to show under Name colum in the table.\n * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n * @param {*} content\n * @returns\n */\nexport const getKey = (content) => {\n    if (content) {\n        const keys = Object.keys(content);\n        let index = keys.findIndex(item => 'title' === item.toLowerCase());\n        if (index > -1) {\n            return Object.keys(content)[index];\n            // return content[Object.keys(content)[index]];\n        } else {\n            index = keys.findIndex(item => 'name' === item.toLowerCase());\n            if (index > -1) {\n                return Object.keys(content)[index];\n                // return content[Object.keys(content)[index]];\n            } else {\n                const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n                if (allowedKeys && allowedKeys.length) {\n                    return allowedKeys[0];\n                    // return content[allowedKeys[0]];\n                }\n            }\n        }\n    }\n    searchByKey = '';\n    return '-';\n}\n\nexport const PAGINATION_MESSAGES = (props) => ({\n    \"firstPage\": props.intl.formatMessage({ id: \"app.firstPage\" }),\n    \"previousPage\": props.intl.formatMessage({ id: \"app.previousPage\" }),\n    \"currentPage\": props.intl.formatMessage({ id: \"app.currentPage\" }),\n    \"nextPage\": props.intl.formatMessage({ id: \"app.nextPage\" }),\n    \"lastPage\": props.intl.formatMessage({ id: \"app.lastPage\" }),\n    \"perPage\": props.intl.formatMessage({ id: \"app.perPage\" }),\n    \"of\": props.intl.formatMessage({ id: \"app.of\" })\n});\n\nexport const parseData = (data) => data.length > 0 ? JSON.parse(data) : data;\n","import moment from 'moment';\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UNIVERSAL_DATE_FORMAT } from \"../helper/Constant\";\nimport { getKey, parseData } from '../helper/Helper';\nimport {  FormattedMessage } from \"react-intl\";\nimport { fetchContents, getAllRecordsByCollectionType } from '../api/Api';\n\nexport class SimpleTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // DATA STATE\n            templateType: [{'label': 'vj'}],\n            selectedTemplateType: [],\n            templateChangedForContent: null,\n            templateSelectedForContent: 0,\n            selectedContent: []\n        }\n    }\n\n    componentDidMount = async () => {\n        await this.getContentByHighestId();\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.contentIdAndTemplateId !== this.props.contentIdAndTemplateId) this.getContentByHighestId();\n    }\n\n    getContentByHighestId = async () => {\n        const getContentIds = this.props.contentIdAndTemplateId && parseData(decodeURI(this.props.contentIdAndTemplateId));\n        let contents = [];\n        if (getContentIds) {\n            console.log(\"getContentIds\", getContentIds);\n            const highestContentId = getContentIds.map(el => el.contentId).sort(function (a, b) { return a - b; }).reverse()[0];\n            contents = await getAllRecordsByCollectionType(this.props.selectedContentName, highestContentId);\n        }\n        const parsedSelectedContent = this.props.selectedContent.length ? JSON.parse(this.props.selectedContent) : ''\n        if (parsedSelectedContent.length) {\n            const filteredCont = parsedSelectedContent.map(cont => contents.results.find(el => el.id === cont.id))\n            console.log(getContentIds,\">------->\", filteredCont);\n            window.aaa = filteredCont;\n            window.bbb = getContentIds;\n            const mappingOfContentWithTemplate = filteredCont.map(el => {\n                // if(getContentIds.find(cont => el.id === cont.contentId)){\n                //     el.templateId = +cont.templateId;\n                // }\n                getContentIds.find(cont => {\n                    if (el.id === +cont.contentId) {\n                        el.templateId = +cont.templateId;\n                    }\n                })\n            });\n            console.log('mappingOfContentWithTemplate ==> 🤡',mappingOfContentWithTemplate)\n            this.setState({ selectedContent: filteredCont })\n        }\n    }\n\n    /**\n       * Renders Button on Typehead.\n       * @returns Button element\n       */\n    renderToggleButton = ({ isMenuShown, onClick }) => (\n        <button\n            type=\"button\"\n            style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n            }}\n        ><span className=\"fa fa-angle-down\"></span></button>\n    );\n\n    onChangeTemplateId = (e, contentId) => {\n        // this.props.setTemplateId(e.target.value);\n        this.setState({ templateSelectedForContent: e.target.value })\n        this.setState({ templateChangedForContent: contentId });\n        const applyTemplateToContent = parseData(this.props.mappingOfContentTemplate).map(el => {\n            el.contentId === contentId && (el.templateId = e.target.value)\n            return {id: el.id, contentId: el.contentId, templateId: el.templateId};\n            // return el;\n        });\n        this.props.setContentTemplate(applyTemplateToContent);\n    }\n\n    onApplyToAll = () => {\n        document.getElementsByName('modelId').forEach((el) => { el.value = `${this.state.templateSelectedForContent}` })\n        const applyTemplateToAllContent = parseData(this.props.mappingOfContentTemplate).map(el => ({ ...el, templateId: this.state.templateSelectedForContent.toString() }));\n        this.props.setContentTemplate(applyTemplateToAllContent);\n        // this.props.setContentTemplate(applyTemplateToAllContent);\n        const applyTemplateToAllContentTwo = this.state.selectedContent.map(el => ({ ...el, templateId: this.state.templateSelectedForContent.toString() }));\n        this.setState({selectedContent: applyTemplateToAllContentTwo})\n    }\n\n    selectTempForContent = (cont) => {\n        if(cont.templateId) return cont.templateId;\n        return 'none';\n    }\n\n    render() {\n        console.log(\"Simple Table PROPS\", this.props);\n        console.log(\"Simple Table STATE\", this.state);\n        const getContentIds = this.props.contentIdAndTemplateId && parseData(decodeURI(this.props.contentIdAndTemplateId));\n        console.log(\"getContentIds RENDER ===>>\",getContentIds);\n        return (\n            <>\n                <table className=\"table table-bordered table-datatable table-hover table-striped Contents__table-element\">\n                    <thead>\n                        <tr  className={this.props.decideToShowQuery() ? 'disabled-table' : ''}>\n                            {Object.keys(contentAttribute).map((item, idx) => <th key={idx}><FormattedMessage id={contentAttribute[item]} /></th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.selectedContent.length > 0 && (\n                                this.state.selectedContent.map(item => {\n                                    console.log(\"this.state.selectedContent >====>\",this.state.selectedContent);\n                                    return (\n                                        <tr key={item.id}>\n                                            <td>{item[getKey(item)]}</td>\n                                            <td>{`${item.createdBy.firstname} ${item.createdBy.lastname}`}</td>\n                                            <td>{moment(new Date(item.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td>{moment(new Date(item.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td width=\"30%\">\n                                                {/* <select defaultValue={'none'} style={{ display: \"inline-block\", width: \"50%\" }} name=\"modelId\" className=\"form-control\" onChange={(e) => this.onChangeTemplateId(e, item.id)}> */}\n                                                <select defaultValue={this.selectTempForContent(item)}\n                                                    style={{ display: \"inline-block\", width: \"50%\" }}\n                                                    name=\"modelId\" className=\"form-control\"\n                                                    onChange={(e) => this.onChangeTemplateId(e, item.id)}\n                                                >\n                                                    {<FormattedMessage id='app.selectTemplate' >\n                                                        {(message) => <option value='none' disabled hidden>{message}</option>}\n                                                    </FormattedMessage>}\n                                                    {this.props.templateList.map((el) => {\n                                                        return <option key={el.id} value={el.id}>{el.templateName}</option>;\n                                                    })}\n                                                </select>\n                                                {item.id === this.state.templateChangedForContent && <div onClick={this.onApplyToAll} style={{ display: \"inline-block\", width: \"50%\", textAlign: \"center\" }}>\n                                                    <Link to=\"#\">\n                                                        <span className=\"fa fa-copy\" style={{ margin: \"0px 10px\" }}></span>\n                                                        <FormattedMessage id='app.applyToAllContents' />\n                                                    </Link>\n                                                </div>}\n                                            </td>\n                                        </tr>\n                                    )\n                                })\n                            )\n\n\n// =============================================\n\n                            // parseSelectedContent.length > 0 && (\n                            //     parseSelectedContent.map(item => {\n                            //         return (\n                            //             <tr key={item.id}>\n                            //                 <td>{item[getKey(item)]}</td>\n                            //                 {/* {fetchTitleOrName(item)} */}\n                            //                 <td>{`${item.createdBy.firstname} ${item.createdBy.lastname}`}</td>\n                            //                 <td>{moment(new Date(item.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                            //                 <td>{moment(new Date(item.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                            //                 <td width=\"30%\">\n                            //                     <select defaultValue={'none'} style={{ display: \"inline-block\", width: \"50%\" }} name=\"modelId\" className=\"form-control\" onChange={(e) => this.onChangeTemplateId(e, item.id)}>\n                            //                         {<FormattedMessage id='app.selectTemplate' >\n                            //                             {(message) => <option value='none' disabled hidden>{message}</option>}\n                            //                         </FormattedMessage>}\n                            //                         {this.props.templateList.map((el) => {\n                            //                             return <option key={el.id} value={el.id}>{el.templateName}</option>;\n                            //                         })}\n                            //                     </select>\n                            //                     {item.id === this.state.templateChangedForContent && <div onClick={this.onApplyToAll} style={{ display: \"inline-block\", width: \"50%\", textAlign: \"center\" }}>\n                            //                         <Link to=\"#\">\n                            //                             <span className=\"fa fa-copy\" style={{ margin: \"0px 10px\" }}></span>\n                            //                             <FormattedMessage id='app.applyToAllContents' />\n                            //                         </Link>\n                            //                     </div>}\n                            //                 </td>\n                            //             </tr>\n                            //         )\n                            //     })\n                            // )\n                        }\n                    </tbody>\n                </table>\n            </>\n        );\n\n    }\n}\n\n\nconst contentAttribute = {\n    Title: \"app.name\" ,\n    createdAt: \"app.created\",\n    updatedAt: \"app.lastEdited\",\n    createDate: \"app.createdDate\",\n    selectDefaultTemplate: \"app.selectDefaultTemplate\"\n    // restirctions: \"Restrictions\"\n}","import {\n    Button, Col, Row\n} from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getCollectionTypes, getTemplate } from '../api/Api';\nimport { BTN_ADD_NEW_CONTENT } from '../helper/Constant';\nimport { SimpleTable } from '../ui/SimpleTable';\nimport {  FormattedMessage, injectIntl } from \"react-intl\";\n\nconst strapiDomain = `${process.env.REACT_APP_STRAPI_API_TARGET_URL}`;\n\nclass Config extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // selectedContent: [],\n            // name: null,\n            // nameTwo: null,\n            collectionTypes: [],\n            // selectedContentId: 0,\n            // selectedTemplateId: 'default',\n            templateList: []\n        };\n        this.handleAddNewContent = this.handleAddNewContent.bind(this);\n    }\n\n    setSelectedContent = (selectedContentArr, selectedContenttype) => {\n        // this.setState({ selectedContent: selectedContentArr })\n        // this.setState({ name: selectedContentArr })\n        // this.setState({ nameTwo: encodeURIComponent(JSON.stringify(selectedContentArr)) })\n        // this.setState({ selectedContentId: selectedContentArr[0].id })\n    }\n\n    handleTypeaheadChangeContentType = selected => {\n        let selectedContentType = selected.map(option => option.label);\n        this.setState({ templateList: selectedContentType });\n    };\n\n    componentDidMount = async () => {\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push({ label: element.info.pluralName })\n        });\n        let { data: templatesList } = await getTemplate(this.props.selectedContentName ? this.props.selectedContentName : '');\n        this.setState({ templateList: templatesList, collectionTypes: templatesList })\n    }\n\n     /**\n     * Navigate to Strapi dashboard/login page in a new tab on browser\n     */\n      handleAddNewContent = () => {\n        let strapiContentManagerUrl = `${strapiDomain}/admin/content-manager`;\n        var newWindow = window.open(strapiContentManagerUrl, '_blank');\n        if(newWindow) {\n            newWindow.focus();\n        }\n    }\n\n    decideToShowQuery = () => this.props.selectedContentLabel && !this.props.selectedContent.length;\n\n    onChangeTemplateId = (e) => {\n        this.props.SaveQueryHandler(\n            {\n                \"templateId\": e.target.value,\n                \"searchTerm\": this.props.searchTerm\n            }\n        );\n    }\n\n    render() {\n        return (\n            <form className=\"form-horizontal SingleContentConfigForm well\">\n                <Row>\n                    <Col xs={12}>\n                        <div>\n                            \n                            <div>\n                                <span className=\"icon fa fa-puzzle-piece\" title=\"Widget\" />\n                                <h5 className=\"SingleContentConfigFormBody__widgetTitle\"><FormattedMessage id=\"app.contentList\" /></h5>\n                                <div className=\"SectionTitle SectionTitle__non-collapsable\" role=\"button\">\n                                    <span><FormattedMessage id=\"app.info\" /></span>\n                                </div>\n                                <div className=\"row\">\n                                    <Col xs={6}>\n                                        <h3 className=\"SingleContentConfigFormBody__contentTitle\">\n                                        <FormattedMessage id=\"app.content\" />: -\n                                        </h3>\n                                    </Col>\n                                    <Col xs={6} className=\"SingleContentConfigFormBody__addButtons\">\n                                        <Link to=\"/configpage\">\n                                            <Button bsStyle=\"primary\"\n                                                onClick={() => (this.decideToShowQuery() || this.props.selectedContent.length) && this.props.manipulateIsEditable('edit')}\n                                            >\n                                                {this.props.selectedContent.length || this.decideToShowQuery() ? <FormattedMessage id='app.edit' /> : <FormattedMessage id='app.addExistingContent' />}\n                                                {!this.decideToShowQuery() && this.props.selectedContent.length > 0 && ' list of '}\n                                                {this.decideToShowQuery() && <FormattedMessage id='app.query' />}\n                                                {this.props.selectedContent.length ? <FormattedMessage id='app.contentsButton' /> : !this.decideToShowQuery() ? <FormattedMessage id='app.contentButton' /> : ''}\n                                            </Button>\n                                        </Link>\n                                        <Button className=\"AddContentTypeFormBody__save--btn\" bsStyle=\"primary\" onClick={this.handleAddNewContent}>\n                                            {BTN_ADD_NEW_CONTENT}\n                                        </Button>\n                                    </Col>\n                                </div>\n                                <div style={{ marginTop: \"1rem\" }}></div>\n                                <SimpleTable\n                                    setTemplateId={this.props.setTemplateId}\n                                    templateList={this.state.templateList}\n                                    // content={this.state.selectedContent}\n                                    selectedContent={this.props.selectedContent}\n                                    mappingOfContentTemplate={this.props.mappingOfContentTemplate}\n                                    setContentTemplate={this.props.setContentTemplate}\n                                    decideToShowQuery={this.decideToShowQuery}\n                                    contentIdAndTemplateId={this.props.contentIdAndTemplateId}\n                                    selectedContentName={this.props.selectedContentName}\n                                />\n                                {\n                                     (\n                                        <div className=\"form-horizontal SingleContentConfigForm custom-well well\">\n                                            <Row className=\"divider\">\n                                                <Col xs={2}>\n                                                    <span className=\"SectionTitle\" role=\"button\">\n                                                        <span><FormattedMessage id='app.query' /></span>\n                                                    </span>\n                                                </Col>\n                                                <Col xs={10}>\n                                                    <div className=\"SingleContentConfigFormBody__addButtons\">\n                                                        <span><b><FormattedMessage id='app.selectDefaultTemplate' /></b></span>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            {this.decideToShowQuery() && <Row>\n                                                <Col xs={2} style={{ borderRight: \"1px solid lightgrey\" }}>\n                                                    <FormattedMessage id='app.savedAsQuery' />\n                                                </Col>\n                                                <Col xs={1} style={{ borderRight: \"1px solid lightgrey\" }}>\n                                                </Col>\n                                                <Col lg={6} style={{ border: \"1px solid lightgrey\", padding: \".2rem\" }}>\n                                                    <code>\n                                                        <span style={{ color: \"#0088ce\" }}><b>Collection Type =  </b> {this.props.selectedContentLabel} </span>\n                                                        <span style={{ color: \"#0088ce\" }}>\n                                                            { this.props.searchTerm && <b>WHERE Name =  </b>}\n                                                            { this.props.searchTerm && `%${this.props.searchTerm}% ` }\n                                                            {/* <b>WHERE Name =  </b> %{this.props.searchTerm}% */}\n                                                             <b>ORDER BY</b> creation date <b>DESC</b></span>\n                                                    </code>\n                                                </Col>\n                                                <Col lg={3}>\n                                                <div className=\"SingleContentConfigFormBody__addButtons\">\n                                                <select defaultValue={'none'} style={{ display: \"inline-block\" }} name=\"modelId\" className=\"form-control\" onChange={(e)=>this.onChangeTemplateId(e)}>\n                                                    <option value=\"none\" disabled hidden>{this.props.intl.formatMessage({ id: \"app.selectTemplate\" })}</option>\n                                                    {this.state.templateList.map((el) => {\n                                                        return <option key={el.id} value={el.id}>{el.templateName}</option>;\n                                                    })}\n                                                </select>\n                                                </div>\n                                                </Col>\n                                            </Row>}\n                                        </div>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </Col>\n\n                </Row>\n            </form>\n        )\n    }\n}\n\nexport default injectIntl(Config);","import moment from 'moment';\nimport { Grid } from 'patternfly-react/dist/js/components/Grid';\nimport { Panel, PanelGroup } from 'react-bootstrap';\nimport { ACCORDION_FONT_SIZE, NO_DATA_AVAILABLE_MSG, STRAPI_EXCLUDE_KEYS, STRAPI_IMAGE_EXTENSIONS, STRAPI_IMAGE_HEIGHT, STRAPI_IMAGE_URL_KEY, STRAPI_IMAGE_WIDTH, UNIVERSAL_DATE_FORMAT } from './Constant';\n\nlet panelGroupId = 1;\n\nexport const renderPanelGroup = (data) => {\n    panelGroupId = panelGroupId + 1;\n    return (\n        <PanelGroup accordion id={panelGroupId} style={{ marginBottom: '5px' }}>\n            {data && Object.keys(data).length > 0\n                ?\n                isImageObject(data)\n                    ?\n                    renderPanel(STRAPI_IMAGE_URL_KEY, 0, data[STRAPI_IMAGE_URL_KEY])\n                    :\n                    Object.keys(data).filter(key => ignoreProps(key)).map((key, index) => {\n                        let keyToShow;\n                        let dataToShow;\n                        if (isAnArray(data) && key && (Number(key) || Number(key) === 0)) {\n                            if(data[key]) {\n                                keyToShow = checkIfComponent(data[key]);\n                                if(keyToShow && !Number(keyToShow)) {\n                                    dataToShow = {...data[key]};\n                                    delete dataToShow['__component'];\n                                } else {\n                                    keyToShow = key;\n                                    dataToShow = data[key];\n                                }\n                            }\n                            if (keyToShow && (Number(keyToShow) || Number(keyToShow) === 0)) {\n                                keyToShow = Number(keyToShow) + 1;\n                                keyToShow = keyToShow.toString();\n                            }\n                        } else {\n                            keyToShow = key;\n                            dataToShow = data[key];\n                        }\n                        return (renderPanel(keyToShow, index, dataToShow));\n                    })\n                :\n                <span>{NO_DATA_AVAILABLE_MSG}</span>}\n        </PanelGroup>\n    )\n}\n\nconst checkIfComponent = (dataObj) => {\n    if (dataObj) {\n        let keys = Object.keys(dataObj);\n        if (keys.includes('__component')) {\n            let arr = dataObj['__component'] && dataObj['__component'].split('.');\n            if (arr && arr.length > 0) {\n                if (arr[1] && arr[1].indexOf('-')) {\n                    return arr[1].replace('-', '_');\n                } else {\n                    return arr[1];\n                }\n            }\n        }\n    }\n}\n\nconst isAnArray = (data) => {\n    if (data) {\n        if (Array.isArray(data)) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst renderPanel = (theKey, theIndex, data) => {\n    return (\n        <Panel eventKey={theIndex} key={theIndex}>\n            {renderPanelHeading(theKey, data)}\n            {\n                isObject(data)\n                &&\n                renderPanelBody(data, true)\n            }\n        </Panel>\n    )\n}\n\nconst renderPanelHeading = (theKey, data) => {\n    return (\n        <Panel.Heading>\n            {isObject(data) && !isImageObject(data)\n                ?\n                renderPanelTitleToggle(theKey)\n                :\n                renderPanelTitle(theKey, data)}\n        </Panel.Heading>\n    );\n}\n\nconst renderPanelTitle = (theKey, data) => {\n    return (\n        <Panel.Title>\n            <Grid.Row className=\"show-grid\" style={{ display: \"flex\", fontSize: ACCORDION_FONT_SIZE }}>\n                <Grid.Col style={{ width: \"10%\", marginLeft: '2.5rem', wordBreak: \"break-word\" }}>\n                    <div>\n                        <strong>\n                            {isImageObject(data) && isKey0To9(theKey)\n                            ?\n                            'Photo' + ' ' + theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            :\n                            theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            }\n                        </strong>\n                    </div>\n                </Grid.Col>\n                <Grid.Col style={{ width: \"90%\", marginLeft: '1rem', paddingRight: '2rem', lineHeight: '1.2' }}>\n                    {\n                    isImageObject(data)\n                    ?\n                    renderAccordionData(data[STRAPI_IMAGE_URL_KEY.toLowerCase()])\n                    :\n                    renderAccordionData(data)\n                    }\n                </Grid.Col>\n            </Grid.Row>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelTitleToggle = (theKey) => {\n    return (\n        <Panel.Title toggle style={{marginLeft: \"-1rem\", fontSize: ACCORDION_FONT_SIZE }}>\n            <span><strong>{theKey.charAt(0).toUpperCase() + theKey.slice(1)}</strong></span>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelBody = (data, isObject) => {\n    if (isObject) {\n        return (\n            <Panel.Body collapsible>\n                {renderPanelGroup(data)}\n            </Panel.Body>\n        )\n    } else {\n        return (\n            <Panel.Body collapsible>\n                <span>{data}</span>\n            </Panel.Body>\n        )\n    }\n}\n\nconst renderAccordionData = (data) => {\n    if (data === null || data === undefined) {\n        return <span> - </span>\n    } else if (typeof data === 'boolean') {\n        return <span>{data.toString()}</span>\n    } else if (typeof data === 'string') {\n        if (endsWithAnyImageExtension(data)) {\n            return <img src={process.env.REACT_APP_STRAPI_API_URL + data} width={STRAPI_IMAGE_WIDTH} height={STRAPI_IMAGE_HEIGHT} alt='image' />\n        } else if(isDate(data)) {\n            return <span>{moment(new Date(data)).format(UNIVERSAL_DATE_FORMAT)}</span>;\n        }\n        return <span style={{ wordBreak: 'break-word' }}>{data}</span>;\n    } else if (typeof data === 'number') {\n        return <span>{data}</span>;\n    } else if (typeof data === 'object') {\n        return data;\n    } else {\n        return <span> - </span>;\n    }\n}\n\nconst isDate = (dateString) => {\n    if(dateString) {\n        if(dateString && dateString.endsWith('Z') && dateString.length === 24 && dateString.split('T')[0].length === 10 && dateString.split('T')[1].length === 13) { //2016-11-16T04:30:00.000Z\n            return true;\n        }\n    }\n    return false;\n}\n\nconst endsWithAnyImageExtension = (string) => {\n    for (let suffix of STRAPI_IMAGE_EXTENSIONS)\n        if (string.toUpperCase().endsWith(suffix))\n            return true;\n    return false;\n}\n\nconst isObject = (data) => {\n    if (data) {\n        if (typeof data === 'object') {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst isImageObject = (object) => {\n    let keys = object && Object.keys(object);\n    if (keys && keys.includes('ext') && keys.includes('formats') && keys.includes('url')) {\n        if (STRAPI_IMAGE_EXTENSIONS.includes(object['ext'].toUpperCase())) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst isKey0To9 = (key) => {\n    if (key && Number(key) && Number(key) >= 0) {\n        return true;\n    } return false;\n}\n\nconst ignoreProps = (key) => {\n    return !STRAPI_EXCLUDE_KEYS.includes(key);\n}","import { Button, Modal, Tab, Tabs } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { getContentDetailsByCollectionTypeAndId, getLocales } from '../api/Api';\nimport { renderPanelGroup } from '../helper/AccordionHelper';\n\nexport default class ContentDetailModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: true,\n            collectionTypes: [],\n            mockRows: [],\n            selectedContent: [],\n            selectedCollectionType: null,\n            collectionAttributes: this.props.dummyData,\n            dataToShowOnModal: {},\n            localeInfo:[],\n            currentCode: [this.props.contentId],\n            dataToShowOnModalRestTabs:{}\n          };\n        this.toggleTab = this.toggleTab.bind(this);\n        this.getCollectionByLocaleName = this.getCollectionByLocaleName.bind(this);\n    }\n\n    toggleTab = (index) => {\n        this.props.setActiveTabKey(index);\n        if (this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0) {\n            this.getCollectionByLocaleName(this.state.currentCode[index]);\n        }\n    }\n\n    getLocaleInfo = async () => {\n        const data = await getLocales();\n        this.setState({ localeInfo: data });\n    }\n\n    getLocaleFullName(code) {\n        const filterItem = this.state.localeInfo.filter(item => item.code === code)\n        return filterItem[0].name;\n    }\n\n    componentDidMount = async () => {\n        this.getLocaleInfo();\n    }\n\n    getCollectionByLocaleName = async (code) => {\n        const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, code);\n        if (code === this.props.contentId)\n            this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n        else {\n            this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n        }\n    }\n\n    componentDidUpdate = async (prevProps, prevState) => {\n        if (this.props.collectionType && this.props.contentId) {\n            if (prevProps.collectionType !== this.props.collectionType || prevProps.contentId !== this.props.contentId) {\n                const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, this.props.contentId);\n                this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n                this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n                this.props.setActiveTabKey(0);\n                this.setState({ currentCode: [this.props.contentId] })\n            }\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <Modal dialogClassName=\"ContentsFilterModal\" show={this.props.show} onHide={this.props.onHide} >\n                    <Modal.Header>\n                        <Modal.Title>{this.state.dataToShowOnModal && Object.keys(this.state.dataToShowOnModal).length > 0 && this.props.fetchTitleOrName(this.state.dataToShowOnModal)}\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                        </div>\n                        <div>\n                            <Tabs id={'id'} activeKey={this.props.activeTabKey} onSelect={this.toggleTab}>\n                                {this.state.dataToShowOnModal && this.state.dataToShowOnModal.locale ? <Tab eventKey={0} title={this.getLocaleFullName(this.state.dataToShowOnModal.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab> : <Tab eventKey={0} title=\"English\" style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab>}\n                                {this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0 && this.state.dataToShowOnModal.localizations.map((locTabs, i) => {\n                                    this.state.currentCode.push(locTabs.id)\n                                    return <Tab key={i + 1} eventKey={i + 1} title={this.getLocaleFullName(locTabs.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                        {renderPanelGroup(this.state.dataToShowOnModalRestTabs)}\n                                    </Tab>\n                                }\n                                )}\n                            </Tabs>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button bsStyle={'primary'} onClick={this.props.onHide}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n","import moment from 'moment';\nimport { Col, Grid, PaginationRow, Row, ListView, ListViewItem } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { Link } from 'react-router-dom';\nimport { filterContentsByName, getCollectionTypes, getContents } from '../api/Api';\nimport { LASTPAGE, NAME, PAGE, PAGECHANGEVALUE, PAGEINPUT, PAGESIZE, PERPAGEOPTIONS, SEARCH_CONTENT_BY_NAME, SELECT_COLLECTION_TYPE, STRAPI_EXCLUDE_KEYS, TOTALITEMS, T_HEADING, UNIVERSAL_DATE_FORMAT } from '../helper/Constant';\nimport ContentDetailModal from '../ui/ContentDetailModal';\nimport {  FormattedMessage,injectIntl } from \"react-intl\";          \nimport { PAGINATION_MESSAGES } from '../helper/Helper';\n class MultiContentList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // PAGINATION STATE\n      page: PAGE,\n      currPageWillUpdating: PAGE,\n      pageSize: PAGESIZE,\n      totalItems: TOTALITEMS,\n      lastPage: LASTPAGE,\n      pageInput: PAGEINPUT,\n      pageChangeValue: PAGECHANGEVALUE,\n      searchBtnClk: false,\n\n      // MODAL STATE\n      show: false,\n      activeTabKey: 0,\n      contentDetailsOnModal: {},\n\n      // SEARCH STATE\n      searchQuery: '',\n      setSearchBy: '',\n      stowSearchQueryTillSubmit: '',\n\n      // DATA STATE\n      collectionType: [],\n      selectedCollectionType: [],\n      contents: [],\n      selectedContent: [],\n      contentIdForModal: '',\n      tempSelectedCollectionType: [],\n    }\n    this.searchByKey = '';\n    // this.stowSearchQueryTillSubmit = '';\n\n  }\n\n  componentDidMount = async () => {\n    this.populateConfigForm();\n    await this.setCollectionTypeState();\n    this.shouldShowEtSaveBtn('hidden');\n  }\n  \n  componentDidUpdate = async (prevProps, prevState) => {\n    if (prevProps.selectedCollectionType !== this.props.selectedCollectionType ||\n      prevState.pageSize !== this.state.pageSize && !this.state.searchBtnClk) {\n      this.setState({ page: PAGE, pageInput: PAGE, currPageWillUpdating: PAGE },\n        async () => {\n          await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, this.state.page, this.state.pageSize);\n        }\n      )\n    }\n    if (prevState.page !== this.state.page && !this.state.searchBtnClk) {\n      if (this.props.searchText || this.searchByKey) {\n        const searchResult = await filterContentsByName(\n          this.state.selectedCollectionType[0].value ? this.state.selectedCollectionType[0].value : this.props.selectedCollectionTypeValue.value,\n          this.state.searchQuery ? this.state.searchQuery : this.props.searchText, this.props.colLabel, this.state.page, this.state.pageSize\n        );\n        this.stateUpdateOnFilterContentsByName(searchResult);\n      } else {\n        await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, this.state.page, this.state.pageSize);\n      }\n    }\n  }\n\n  componentWillUnmount = () => {\n    this.shouldShowEtSaveBtn('visible');\n  }\n\n  populateConfigForm = async () => {\n    if (this.props.selectedCollectionTypeValue.value && this.props.selectedCollectionTypeValue.label) {\n      this.setState({ selectedCollectionType: [this.props.selectedCollectionTypeValue] })\n      if (this.props.searchText && this.props.colLabel) {\n        this.searchByKey = this.props.colLabel;\n        this.setState({searchQuery: this.props.searchText, stowSearchQueryTillSubmit: this.props.searchText})\n        const searchResult = await filterContentsByName(\n          this.props.selectedCollectionTypeValue.value,\n          this.props.searchText, this.props.colLabel, PAGE, PAGESIZE\n        );\n        this.stateUpdateOnFilterContentsByName(searchResult);\n      } else {\n        await this.getContentsByCollectionType(this.props.selectedCollectionTypeValue.value)\n      }\n    }\n    if (this.props.selectedContentList.length) {\n      this.setState({selectedContent: JSON.parse(this.props.selectedContentList)})\n    }\n  }\n\n  shouldShowEtSaveBtn = (btnVisibility) => {\n    for (let el of document.getElementsByClassName('pull-right save btn btn-primary')) {\n      el.style.visibility = btnVisibility;\n    }\n  }\n\n  stateUpdateOnFilterContentsByName(searchResult) {\n    this.setState({\n      contents: searchResult.results,\n      lastPage: searchResult.pagination.pageCount,\n      page: searchResult.results.length ? searchResult.pagination.page : 0,\n      currPageWillUpdating: searchResult.results.length ? searchResult.pagination.page : 0,\n      pageSize: searchResult.pagination.pageSize,\n      totalItems: searchResult.pagination.total,\n      searchBtnClk: true\n    });\n  }\n\n  async setCollectionTypeState() {\n    const { data: collectionTypeData } = await getCollectionTypes();\n    const collectionTypeApiData = this.filterUidByApiPrefix(collectionTypeData);\n    this.setState({ collectionType: collectionTypeApiData.map(el => ({ label: el.info.displayName, value: el.info.singularName })) });\n  }\n\n  filterUidByApiPrefix = (collectionTypeData) => {\n    return collectionTypeData.filter(el => el.uid.startsWith('api::'))\n  }\n\n  open = async (content) => {\n    this.setState({ show: true, contentDetailsOnModal: content, contentIdForModal: content && content.id, activeTabKey: 0 })\n  }\n\n  close = () => {\n    this.setState({ show: false })\n  }\n\n  setActiveTabKey = (value) => {\n    this.setState({activeTabKey: value})\n  }\n\n  handleCollectionTypeChange = async (collectionType) => {\n    this.searchByKey = '';\n    // this.props.setQueryTerm('');\n    this.props.setFieldSearchBy('');\n    this.setState({ contents: [], selectedContent: [] });\n    const collType = collectionType[0]\n    this.setState({ selectedCollectionType: collectionType, searchQuery: '', stowSearchQueryTillSubmit: '' })\n    if (collType && collType.value) {\n      await this.getContentsByCollectionType(collType.value)\n    }\n    this.setState({ contentIdForModal: undefined });\n  }\n\n  getContentsByCollectionType = async (collectionType, page, pageSize) => {\n    const contentData = await getContents(collectionType, page, pageSize);\n    this.setState({\n      contents: contentData.results,\n      lastPage: contentData.pagination.pageCount,\n      page: contentData.results.length ? contentData.pagination.page : 0,\n      currPageWillUpdating: contentData.results.length ? contentData.pagination.page : 0,\n      pageSize: contentData.pagination.pageSize,\n      totalItems: contentData.pagination.total,\n      setSearchBy: contentData && contentData.results.length && Object.keys(contentData.results[0])[1],\n      // selectedContent: [] // commented due to issue of clearing the cache of selected content.\n    });\n  }\n\n  /**\n   * Renders Button on Typehead.\n   * @returns Button element\n   */\n  renderToggleButton = ({ isMenuShown, onClick }) => (\n    <button\n      type=\"button\"\n      style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n      onClick={(e) => {\n        e.preventDefault();\n        onClick(e);\n      }}\n    ><span className=\"fa fa-angle-down\"></span></button>\n  );\n\n  changePage(page) {\n    this.setState({ page: page, currPageWillUpdating: page })\n  }\n\n  setPage = value => {\n    const page = Number(value);\n    if (\n      !Number.isNaN(value) &&\n      value !== '' &&\n      page > 0 &&\n      page <= this.totalPages()\n    ) {\n      let newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  }\n\n  onContentSearch = async (e) => {\n    e.preventDefault();\n    this.setState({ searchQuery: this.state.stowSearchQueryTillSubmit }, async () => {\n      // this.setState({ stowSearchQueryTillSubmit: '' })\n      // collectionType, query, searchBy\n      this.props.setFieldSearchBy(this.searchByKey);\n      if (this.state.searchQuery) {\n        const searchResult = await filterContentsByName(\n          this.state.selectedCollectionType[0].value,\n          this.state.searchQuery, this.searchByKey, PAGE, PAGESIZE\n          );\n          this.stateUpdateOnFilterContentsByName(searchResult);\n        } else {\n          this.getContentsByCollectionType(this.state.selectedCollectionType[0].value)\n        }\n    })\n  }\n\n   handleQueryChange = (e) => {\n     // this.props.setQueryTerm( e.target.value );\n     e.preventDefault();\n     this.setState({ stowSearchQueryTillSubmit: e.target.value })\n     // this.setState({ searchQuery: e.target.value })\n   }\n\n  onPerPageSelect = (pageSize) => {\n    this.setState({ searchBtnClk: false });\n    this.setState({pageSize})\n  }\n\n  onPageInput = e => {\n    this.setState({ currPageWillUpdating: e.target.value })\n  }\n\n  onSubmit = () => {\n    if (+this.state.currPageWillUpdating && this.state.currPageWillUpdating <= this.state.lastPage) {\n      this.setState({ page: +this.state.currPageWillUpdating })\n    }\n  };\n\n  onContentSelect(content) {\n    if (!this.state.selectedContent.find(contentItem => (contentItem.id === content.id))) {\n      this.setState({ selectedContent: [content, ...this.state.selectedContent] })\n    } else {\n      const removedUnselectedContentId = this.state.selectedContent.filter(contentItem => contentItem.id !== content.id);\n      this.setState({ selectedContent: removedUnselectedContentId })\n    }\n  }\n\n\n  onContentListSaveHandler = () => {\n    this.props.setQueryTerm( this.state.searchQuery );\n    this.props.setContentTemplate(this.state.selectedContent.map((el) => ({ ...el, contentId: el.id, templateId: null })))\n    // this.props.setContentTemplate(this.state.selectedContent.map((el) => ({ id: el.id, contentId: el.id, templateId: null })))\n    this.props.setSelectedContentName(this.state.selectedCollectionType[0].value, this.state.selectedCollectionType[0].label, this.state.searchQuery)\n  }\n\n  checkIfSelected = (content) => {\n    if (this.state.selectedContent.length) {\n      const selectedItem = this.state.selectedContent.find(el => { return (el.id === content.id); })\n      // const selectedItem = this.state.selectedContent.find(el => { return (el.id === content.id); })\n      if (selectedItem) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Value to show under Name colum in the table.\n   * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n   * @param {*} content\n   * @returns\n   */\n   fetchTitleOrName = (content) => {\n    if (content) {\n      const keys = Object.keys(content);\n      let index = keys.findIndex(item => 'title' === item.toLowerCase());\n      if (index > -1) {\n        this.searchByKey = Object.keys(content)[index];\n        return content[Object.keys(content)[index]];\n      } else {\n        index = keys.findIndex(item => 'name' === item.toLowerCase());\n        if (index > -1) {\n          this.searchByKey = Object.keys(content)[index];\n          return content[Object.keys(content)[index]];\n        } else {\n          const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n          if (allowedKeys && allowedKeys.length) {\n            this.searchByKey = allowedKeys[0];\n            return content[allowedKeys[0]];\n          }\n        }\n      }\n    }\n    this.searchByKey = '';\n    return '-';\n  }\n\n  isToEnableSaveQueryBtn() {\n    return !(this.state.selectedContent.length === 0 && this.state.contents && this.state.contents.length);\n  }\n\n   editMode = (key) => {\n     if (this.props.isEditable === 'edit' &&\n       Object.keys(this.props.selectedCollectionTypeValue).length\n       && this.props.selectedCollectionTypeValue.label\n       && this.props.selectedCollectionTypeValue.value\n     ) {  // keep in constant file\n       return this.props.selectedCollectionTypeValue[key]\n     }\n     return null\n   }\n\n   cancelHandler = () => {\n     this.props.setSelectedContentName(this.editMode('value'), this.editMode('label'))\n     if (this.props.isEditable === 'edit' && this.state.selectedContent.length) {\n       this.setState({ searchQuery: '' });\n       this.props.setQueryTerm('');\n       return\n     }\n     if (this.props.isEditable === 'edit' && !this.props.searchText) {\n       this.setState({ searchQuery: '' });\n       this.props.setQueryTerm('');\n       return\n     }\n   }\n\n   render() {\n    const pagination = {\n      page: !this.state.page ? 1 : this.state.page,\n      perPage: this.state.pageSize,\n      perPageOptions: PERPAGEOPTIONS,\n    };\n    const itemsStart = this.state.totalItems === 0 ? 0 : ((this.state.page - 1) * this.state.pageSize) + 1;\n    const itemsEnd = Math.min(this.state.page * this.state.pageSize, this.state.totalItems);\n\n    return (\n      <Grid>\n        <Row className=\"mt-2\">\n          <Col lg={12}>\n            <legend>\n              <FormattedMessage id=\"app.contentList\" />\n            </legend>\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col lg={3}>\n            <h6><b><FormattedMessage id=\"app.selectCollectionType\" /></b></h6>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={3}>\n            <Typeahead\n              id=\"collectionTypeDropdown\"\n              placeholder={this.props.intl.formatMessage({ id: \"app.selectCollection\" })}\n              emptyLabel={this.props.intl.formatMessage({ id: \"app.noMatchesFound\" })}\n              options={this.state.collectionType}\n              onChange={this.handleCollectionTypeChange}\n              selected={this.state.selectedCollectionType}\n            >\n              {({ isMenuShown, toggleMenu }) => (\n                this.renderToggleButton({ isMenuShown, onClick: toggleMenu })\n              )}\n            </Typeahead>\n          </Col>\n        </Row>\n        {\n          Object.keys(this.state.selectedCollectionType).length > 0 &&\n          <>\n            <Row className=\"mt-2\">\n              <Col lg={3}>\n                <h5 style={{ marginBottom: \"0px\" }}><strong>{this.state.selectedCollectionType && this.state.selectedCollectionType[0] && this.state.selectedCollectionType[0].label}</strong></h5>\n              </Col>\n            </Row>\n            <Row>\n              <Col lg={12}>\n                <div\n                  className=\"ContentsFilter well\"\n                  role=\"button\"\n                  tabIndex={0}\n                  style={{ margin: '1rem 0rem' }}\n                >\n                  <form >\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                      <button id=\"dropdown-example\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" type=\"button\" className=\"dropdown-toggle btn btn-default\">{NAME}</button>\n                      <input\n                        type=\"search\"\n                        name=\"name\"\n                        // value={this.state.searchQuery ? this.state.searchQuery : this.state.stowSearchQueryTillSubmit}\n                        value={this.state.stowSearchQueryTillSubmit}\n                        // this.stowSearchQueryTillSubmit\n                        onChange={this.handleQueryChange}\n                        role=\"combobox\"\n                        className=\"rbt-input-main form-control rbt-input\"\n                        placeholder={this.props.intl.formatMessage({ id: \"app.searchContentByName\" })}\n                      />\n                    </div>\n                    <div className=\"pull-right mbt10\" style={{ margin: \"0 0 10px 0\" }} >\n                      <button className=\"btn btn-primary\" onClick={this.onContentSearch}><FormattedMessage id='app.search' /></button>\n                    </div>\n                  </form>\n                </div>\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col lg={12}>\n                <table className=\"table dataTable table-striped table-bordered table-hover\">\n                  <thead>\n                    <tr>\n                      {Object.keys(T_HEADING).map(el => <th key={el}>{T_HEADING[el]}</th>)}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.contents.map(content => {\n                      return (\n                        <tr key={content.id}>\n                          <td width=\"5%\" align=\"center\">\n                            <input onChange={() => {\n                              this.onContentSelect(content); if (!this.state.selectedContent.length) {\n                                this.props.setQueryTerm('')\n                              }\n                            }}\n                              type=\"checkbox\" checked={this.checkIfSelected(content)} id={content + content.id} name=\"content\" value={content.id}\n                            />\n                          </td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{this.fetchTitleOrName(content)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{`${content.createdBy.firstname} ${content.createdBy.lastname}`}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                        </tr>)\n                    })}\n                  </tbody>\n                </table>\n                <div className=\"custom-page\"></div>\n                <PaginationRow\n                  itemCount={this.state.totalItems}\n                  itemsStart={itemsStart}\n                  itemsEnd={itemsEnd}\n                  viewType=\"table\"\n                  pagination={pagination}\n                  amountOfPages={!this.state.lastPage ? 1 : this.state.lastPage}\n                  pageInputValue={!this.state.currPageWillUpdating ? 1 : this.state.currPageWillUpdating}\n                  onPageSet={this.changePage}\n                  onPerPageSelect={this.onPerPageSelect}\n                  onFirstPage={() => { this.setState({ searchBtnClk: false }); this.changePage(1) }}\n                  onPreviousPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.page - 1) }}\n                  onPageInput={this.onPageInput}\n                  onNextPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.page + 1) }}\n                  onLastPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.lastPage) }}\n                  onSubmit={this.onSubmit}\n                  messages={PAGINATION_MESSAGES(this.props)}\n                />\n              </Col>\n            </Row>\n            {\n              <>\n                <Row className=\"mt-2\" >\n                  <Col sm={12}>\n                    <h6><b><FormattedMessage id='app.widgetConfiguration' /></b></h6>\n                  </Col>\n                </Row>\n                <Row className=\"mt-2\" >\n                  <Col sm={2}>\n                  <FormattedMessage id='app.queryFilter' />\n                  </Col>\n                  <Col sm={10} className=\"queryBg\">\n                    <code>\n                      <span style={{ color: \"#0088ce\" }}><b>Collection Type =  </b> {this.state.selectedCollectionType[0].label} </span>\n                      <span style={{ color: \"#0088ce\" }}>\n                        {\n                          // (this.state.searchQuery.length || this.props.searchText.length) > 0 && (<><b>WHERE Name = </b> %{this.state.searchQuery || this.props.searchText}% </>)\n                          (this.state.searchQuery.length > 0) && (<><b>WHERE Name = </b> %{this.state.searchQuery}% </>)\n                        }\n                        <b>ORDER BY</b> creation date <b>DESC</b>\n                      </span>\n                    </code>\n                  </Col>\n                </Row>\n              </>}\n            {this.state.selectedContent.length > 0 && this.state.selectedContent.map(content => {\n              return (\n                <Row className=\"mt-2\" key={content.id} style={{ borderBottom: \"1px solid lightgrey\", padding: \".5rem\" }}>\n                  <Col sm={2} style={{ borderRight: \"1px solid lightgrey\" }}>\n                    {this.fetchTitleOrName(content)}\n                  </Col>\n                  <Col sm={8}>\n                    {this.state.selectedCollectionType && this.state.selectedCollectionType[0].label}\n                  </Col>\n                  <Col sm={2} className={\"SingleContentConfigFormBody__addButtons\"}>\n                    <button className=\"btn\" onClick={()=>this.onContentSelect(content)}><FormattedMessage id='app.remove' /></button>\n                  </Col>\n                </Row>\n              )\n            })}\n            <Row className=\"SingleContentConfigFormBody__actionBar row\">\n              <Col sm={6}>\n              </Col>\n              <Col sm={6} className=\"SingleContentConfigFormBody__addButtons\">\n                <Link to=\"/\">\n\n                  <button className=\"btn-default btn\"\n                    onClick={() => this.cancelHandler()}>\n                    <FormattedMessage id='app.cancel' />\n                  </button>\n\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\"\n                    onClick={() => this.onContentListSaveHandler()}\n                    disabled={this.isToEnableSaveQueryBtn()}>\n                    <FormattedMessage id='app.saveAsQuery' />\n                  </button>\n\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\"\n                    onClick={() => this.onContentListSaveHandler()}\n                    disabled={!this.state.selectedContent.length}>\n                    <FormattedMessage id='app.saveAsListOfContents'/>\n                  </button>\n\n                </Link>\n              </Col>\n            </Row>\n          </>\n        }\n        <ContentDetailModal show={this.state.show} onHide={this.close} contentDetailsOnModal={this.state.contentDetailsOnModal} contentId={this.state.contentIdForModal} \n          collectionType={this.state.selectedCollectionType && this.state.selectedCollectionType.length && this.state.selectedCollectionType[0].value}\n          fetchTitleOrName={this.fetchTitleOrName} activeTabKey={this.state.activeTabKey} setActiveTabKey={this.setActiveTabKey} />\n      </Grid>\n    )\n  }\n}\n\nexport default injectIntl(MultiContentList);                                 ","export default {\n    'app.contentList': 'Content List',\n    'app.selectCollectionType': 'Select Collection Type',\n    'app.info':'Info',\n    'app.content': 'Content',\n    'app.contentsButton': 'contents',\n    'app.contentButton': 'content',\n    'app.name':'Name',\n    'app.created':'Created by',\n    'app.lastEdited':'Last edited',\n    'app.createdDate':'Created date',\n    'app.selectDefaultTemplate':'Select default template*',\n    'app.addExistingContent':'Add existing ',\n    'app.addNewContent':'Add new content',\n    'app.select':'Select',\n    'app.selectCollection':'Choose an option',\n    'app.widgetConfiguration':'Widget Configuration',\n    'app.queryFilter':'Query Filter',\n    'app.cancel':'Cancel',\n    'app.savedAsQuery':'Saved as Query',\n    'app.saveAsQuery':'Save as Query',\n    'app.saveAsListOfContents':'Save as list of Contents',\n    'app.select':'Select',\n    // 'app.lastEdited':'Last Edited',\n    'app.createdEdited':'Created Edited',\n    'app.searchContentByName':'Filter By Name...',\n    'app.remove':'Remove',\n    'app.query':' Query',\n    'app.selectTemplate':'Select Template',\n    'app.edit':'Edit',\n    'app.queryFilter':' Query Filter',\n    'app.search':'Search',\n    'app.applyToAllContents':'Apply to all contents',\n    'app.noMatchesFound': 'No matches found',\n    'app.noDataAvailable': 'No data available',\n    'app.firstPage': 'First Page',\n    'app.previousPage': 'Previous Page',\n    'app.currentPage': 'Current Page',\n    'app.nextPage': 'Next Page',\n    'app.lastPage': 'Last Page',\n    'app.perPage': 'per page',\n    'app.of': 'of',\n    }","export default {\n    'app.contentList': 'Content Elenco',\n    'app.selectCollectionType': 'Seleziona Tipo di raccolta',\n    'app.info':'Informazioni',\n    'app.content': ' Contenuto',\n    'app.contentsButton': 'contenuti',\n    'app.contentButton': 'contenuto',\n    'app.name':'Nome',\n    'app.created':'Creata da',\n    'app.lastEdited':'Ultima modifica',\n    'app.createdDate':'Creata Data',\n    'app.selectDefaultTemplate':'Seleziona il modello predefinito*',\n    'app.addExistingContent':'Aggiungi esistente',\n    'app.addNewContent':'Aggiungi nuovo contenuto',\n    'app.select':'Seleziona',\n    'app.selectCollection':\"Scegliere un'opzione\",\n    'app.widgetConfiguration':'Configurazione del widget',\n    'app.queryFilter':'Filtro di query',\n    'app.cancel':'Annulla',\n    'app.savedAsQuery':'Salvato come query',\n    'app.saveAsQuery':'Salva come query',\n    'app.saveAsListOfContents':'Salva come elenco di contenuti',\n    'app.select':'Selezionare',\n    // 'app.lastEdited':'Ultima modifica',\n    'app.createdEdited':'Data di Creazione',\n    'app.searchContentByName':'Filtra per nome',\n    'app.remove':'Rimuovere',\n    'app.query':'Domanda',\n    'app.selectTemplate':'Seleziona Modello',\n    'app.edit':'modificare',\n    'app.query':'Filtro di query',\n    'app.search':'Ricerca',\n    'app.applyToAllContents':'Applica a tutti i contenuti',\n    'app.noMatchesFound': 'Nessun risultato trovato',\n    'app.noDataAvailable': 'Nessun dato disponibile',\n    'app.firstPage': 'Prima pagina',\n    'app.previousPage': 'Pagina precedente',\n    'app.currentPage': 'Pagina corrente',\n    'app.nextPage': 'Pagina successiva',\n    'app.lastPage': 'Ultima pagina',\n    'app.perPage': 'per pagina',\n    'app.of': 'di',\n    }\n\n    //'app.content': 'Contenuto',","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { IntlProvider } from \"react-intl\";\nimport Config from './page/Config';\nimport MultiContentList from './page/MultiContentList';\n\nimport en from \"./en.js\";\nimport it from \"./it.js\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContentName: null,\n            // mappingOfContentTemplate: [],\n            mappingOfContentTemplate: '',\n            contentIdAndTemplateId: '',\n            selectedCollectionType: null,\n            searchText: '',\n            saveQuery: '',\n            colLabel: '',\n            locale:'en',\n            // messages:{ en, it },\n            isEditable: '',\n        };\n    }\n\n    componentDidMount = () => {\n        this.setLocale();\n    }\n\n    // TODO: PBCS-54 ~ Need to verify once the mechanism is implemented by Entando Team \n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.config !== this.props.config) {\n            this.setLocale();\n        }\n    }\n\n    setContentTemplate = (data) => {\n        const getJsonString = JSON.stringify(data.map(el => ({ templateId: el.templateId, contentId: el.contentId })));\n        this.setState({ mappingOfContentTemplate: data.length ? JSON.stringify(data): '', contentIdAndTemplateId: encodeURI(getJsonString) });\n    }\n\n    setSelectedContentName = (contentName, contentLabel) => {\n        this.setState({ selectedContentName: contentName, selectedCollectionType: contentLabel })\n    }\n\n    setQueryTerm = (searchTerm) => {\n        this.setState({ searchText: searchTerm })\n    }\n\n    SaveQueryHandler = (saveQueryData) => {\n        this.setState({ saveQuery: encodeURI(JSON.stringify(saveQueryData)) });\n    }\n\n    setFieldSearchBy = (fieldSearchWith) => {\n        this.setState({ colLabel: fieldSearchWith })\n    }\n\n    setLocale = () => {\n        const currLocale = this.props.config && this.props.config.locale;\n        if (currLocale.length) {\n            this.setState({ locale: currLocale });\n        }\n    }\n\n    manipulateIsEditable = (value) => this.setState({ isEditable: value });\n\n    decideLocale = locale => {\n        if (locale === 'en') return en;\n        if (locale === 'it') return it;\n    }\n\n    render() {\n        window.heckthebox = this.state.mappingOfContentTemplate;\n        return (\n            <IntlProvider locale={this.state.locale} messages={this.decideLocale(this.state.locale)}>\n                <>\n                    <HashRouter>\n                        <Switch>\n                            <Route path='/' exact>\n                                <Config\n                                    selectedContent={this.state.mappingOfContentTemplate}\n                                    mappingOfContentTemplate={this.state.mappingOfContentTemplate}\n                                    setContentTemplate={this.setContentTemplate}\n                                    selectedContentLabel={this.state.selectedCollectionType}\n                                    searchTerm={this.state.searchText}\n                                    SaveQueryHandler={this.SaveQueryHandler}\n                                    selectedContentName={this.state.selectedContentName}\n                                    manipulateIsEditable={this.manipulateIsEditable}\n                                    contentIdAndTemplateId={this.state.contentIdAndTemplateId}\n                                />\n                            </Route>\n                            <Route path='/configpage' exact>\n                                <MultiContentList\n                                    setContentTemplate={this.setContentTemplate}\n                                    setSelectedContentName={this.setSelectedContentName}\n                                    setQueryTerm={this.setQueryTerm}\n                                    setFieldSearchBy={this.setFieldSearchBy}\n                                    searchText={this.state.searchText}\n                                    selectedCollectionTypeValue={{ label: this.state.selectedCollectionType, value: this.state.selectedContentName }}\n                                    selectedContentList={this.state.mappingOfContentTemplate}\n                                    colLabel={this.state.colLabel}\n                                    isEditable={this.state.isEditable}\n                                />\n                            </Route>\n                        </Switch>\n                    </HashRouter>\n                </>\n            </IntlProvider>\n        )\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../App';\n\nclass WidgetElement extends HTMLElement {\n    constructor() {\n        super();\n        this.reactRootRef = React.createRef();\n        this.mountPoint = null;\n    }\n\n    #config = {\n        locale: 'en',\n    }\n\n    #updateConfig(value) {\n        this.#config = JSON.parse(value)\n    }\n\n    static get observedAttributes() {\n        return [\"config\"]\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        this.#updateConfig(newValue)\n        // this.render()\n        const MainApp = <App ref={this.reactRootRef} config={this.#config} />;\n        ReactDOM.render(MainApp, this.mountPoint);\n    }\n\n    get config() {\n        return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n    }\n\n    set config(value) {\n        return this.reactRootRef.current.setState(value);\n    }\n\n    connectedCallback() {\n        this.mountPoint = document.createElement('div');\n        this.appendChild(this.mountPoint);\n        const MainApp = <App ref={this.reactRootRef} config={this.#config} />;\n        ReactDOM.render(MainApp, this.mountPoint);\n    }\n}\n\ncustomElements.get('list-content-widget-config') || customElements.define('list-content-widget-config', WidgetElement);\n\nexport default WidgetElement;\n"],"sourceRoot":""}